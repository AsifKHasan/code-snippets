A trie is an incredibly space-efficient data structure which is very useful for interviews, but it can be unwieldy to implement quickly. A trie stores one node per letter (shared), so you can store a list of words without having to store shared prefixes more than once.

_trie = lambda: collections.defaultdict(_trie)
trie = _trie()
for word in words: functools.reduce(dict.__getitem__, word, trie).setdefault('_end')

This code snippet makes a trie from `words`, and sets all the terminal values to be `_end`. Hence, to check if a word “tea” exists, you can evaluate:

trie['t']['e']['a']  # should be a key '_end' here with value None

https://hub.mybinder.org/user/asifkhasan-code-with-nizhni-jjch7swj/tree
[![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/AsifKHasan/code-with-nizhni/master)

import matplotlib.pyplot as plt
import numpy as np

x = np.arange(-2.0, 2.0, 0.01)
y = np.tan(np.pi*x)
plt.plot(x, y)

plt.xlabel('x')
plt.ylabel('y')
plt.title('sin function')
plt.grid(True)
#plt.savefig("plot-voltage-vs.-time.png")
plt.show()
